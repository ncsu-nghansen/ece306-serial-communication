###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       21/Mar/2014  15:50:46 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  K:\ece306\Projects\Project5\LCD.c                       #
#    Command line  =  K:\ece306\Projects\Project5\LCD.c -lC                   #
#                     K:\ece306\Projects\Project5\Debug\List\ -o              #
#                     K:\ece306\Projects\Project5\Debug\Obj\ --no_cse         #
#                     --no_unroll --no_inline --no_code_motion --no_tbaa      #
#                     --debug -D__MSP430FR5739__ -e --double=32               #
#                     --dlib_config "C:\Program Files (x86)\IAR               #
#                     Systems\Embedded Workbench                              #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  K:\ece306\Projects\Project5\Debug\List\LCD.lst          #
#    Object file   =  K:\ece306\Projects\Project5\Debug\Obj\LCD.r43           #
#                                                                             #
#                                                                             #
###############################################################################

K:\ece306\Projects\Project5\LCD.c
      1          /******************************************************************************
      2          LCD Control
      3          Description: This file contains the LCD Functions that will be called by other
      4          methods to interface with the LCD.
      5          
      6          Original Author:
      7          Jim Carlson, Jan 2014, Built with IAR Embedded Workbench Version: V4.10A/W32 (5.60.5)
      8          
      9          Edit 1:
     10          Nathan Hansen, Feb 2014, Built with IAR Embedded Workbench Version: 5.60.5
     11          ******************************************************************************/
     12          
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x640
   \   union <unnamed> _A_UCB0CTLW0_L
   \                     _A_UCB0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x646
   \   union <unnamed> _A_UCB0BRW_L
   \                     _A_UCB0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x64e
   \   union <unnamed> _A_UCB0TXBUF_L
   \                     _A_UCB0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x66c
   \   union <unnamed> _A_UCB0IFG_L
   \                     _A_UCB0IFG_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          #include "macros.h"
     16          
     17          // LCD Configurations
     18          void five_msec_sleep(unsigned int fivemsec);// Systems
     19          
     20          
     21          
     22          // DOG-M162 LCD Driver
     23          //   Uses SPIB (eUCSI_B0)
     24          //   P1.4 -> SPI_CS_LCD
     25          //   P1.7 -> RS_LCD
     26          extern volatile unsigned char control_state[CNTL_STATE_INDEX];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned char lcd_control;
   \                     lcd_control:
   \   000000                DS8 1
     28          extern volatile unsigned char current_character;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          char display_line_1[INDEX_17];
   \                     display_line_1:
   \   000000                DS8 17

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          char display_line_2[INDEX_17];
   \                     display_line_2:
   \   000000                DS8 17

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          char *display_1;
   \                     display_1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          char *display_2;
   \                     display_2:
   \   000000                DS8 2
     33          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int char_count;
   \                     char_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          char current_line;
   \                     current_line:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          volatile unsigned int update_display_count;
   \                     update_display_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          volatile unsigned int display_update_time;
   \                     display_update_time:
   \   000000                DS8 2
     38          // Initialization sequence as described in MSP430FR57xx User Guide, 19.3.1  
     39          // Peripheral defaults to 3-pin SPI mode  

   \                                 In  segment CODE, align 2
     40          void Init_SPI_B0(void){
   \                     Init_SPI_B0:
     41          // Reset peripheral  
     42              UCB0CTLW0 = UCSWRST;
   \   000000   92434006     MOV.W   #0x1, &0x640
     43          // ACLK is clock source  
     44              UCB0CTLW0 |= UCSSEL__SMCLK;
   \   000004   B2D080004006 BIS.W   #0x80, &0x640
     45          // master mode, MSB transmitted first  
     46              UCB0CTLW0 |= UCMST | UCMSB | UCSYNC | UCCKPL;
   \   00000A   B2D000694006 BIS.W   #0x6900, &0x640
     47          
     48              UCB0BRW = SPI_CLK_PRESCALER;
   \   000010   B24050004606 MOV.W   #0x50, &0x646
     49          // Enable peripheral  
     50              UCB0CTLW0 &= ~(UCSWRST);
   \   000016   92C34006     BIC.W   #0x1, &0x640
     51          // Wait to ensure the peripheral is up  
     52              __delay_cycles(WAIT_100);
   \   00001A                ////////////// Start of 100 cycles delay.
   \   00001A   003C         JMP     ??Init_SPI_B0_1
   \                     ??Init_SPI_B0_1:
   \   00001C   3F401F00     MOV.W   #0x1f, R15
   \                     ??Init_SPI_B0_0:
   \   000020   3F53         ADD.W   #0xffff, R15
   \   000022   FE2F         JC      ??Init_SPI_B0_0
   \   000024                ////////////// End of delay code.
     53          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_UCB0CTLW0_L
   \   000026                REQUIRE _A_UCB0BRW_L
     54          //------------------------------------------------------------------------------
     55          // Writes a byte out of SPIB, assumes CSB already low  

   \                                 In  segment CODE, align 2
     56          void SPI_B0_write(char byte){
   \                     SPI_B0_write:
   \                     ??SPI_B0_write_0:
     57          // Wait for TX empty  
     58            while (!(UCB0IFG & UCTXIFG));
   \   000000   A2B36C06     BIT.W   #0x2, &0x66c
   \   000004   FD2B         JNC     ??SPI_B0_write_0
     59            UCB0TXBUF = byte;
   \   000006   4C4C         MOV.B   R12, R12
   \   000008   824C4E06     MOV.W   R12, &0x64e
     60          // Wait for TX empty  
     61            while (!(UCB0IFG & UCTXIFG));
   \                     ??SPI_B0_write_1:
   \   00000C   A2B36C06     BIT.W   #0x2, &0x66c
   \   000010   FD2B         JNC     ??SPI_B0_write_1
     62          }
   \   000012   1001         RETA
   \   000014                REQUIRE _A_UCB0IFG_L
   \   000014                REQUIRE _A_UCB0TXBUF_L
     63          //------------------------------------------------------------------------------
     64          // These inline functions provide convenient controls
     65          // for the CSB and RS bits used by the LCD.
     66          
     67          // Low - Command  High - Data

   \                                 In  segment CODE, align 2
     68          void spi_rs_data(void){
   \                     spi_rs_data:
     69            P1OUT |= RS_LCD;
   \   000000   F2D080000202 BIS.B   #0x80, &0x202
     70          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
     71          

   \                                 In  segment CODE, align 2
     72          void spi_rs_command(void){
   \                     spi_rs_command:
     73            P1OUT &= ~RS_LCD;
   \   000000   F2C080000202 BIC.B   #0x80, &0x202
     74          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
     75          

   \                                 In  segment CODE, align 2
     76          void spi_chipselect_idle(void){
   \                     spi_chipselect_idle:
     77            P1OUT |= SPI_CS_LCD;
   \   000000   F2D010000202 BIS.B   #0x10, &0x202
     78          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
     79          

   \                                 In  segment CODE, align 2
     80          void spi_chipselect_active(void){
   \                     spi_chipselect_active:
     81            P1OUT &= ~SPI_CS_LCD;
   \   000000   F2C010000202 BIC.B   #0x10, &0x202
     82          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
     83          

   \                                 In  segment CODE, align 2
     84          void spi_reset_idle(void){
   \                     spi_reset_idle:
     85            P1OUT |= RESET_LCD;
   \   000000   F2D020000202 BIS.B   #0x20, &0x202
     86          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
     87          

   \                                 In  segment CODE, align 2
     88          void spi_reset_active(void){
   \                     spi_reset_active:
     89            P1OUT &= ~RESET_LCD;
   \   000000   F2C020000202 BIC.B   #0x20, &0x202
     90          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
     91          

   \                                 In  segment CODE, align 2
     92          void Init_LCD(void){
   \                     Init_LCD:
     93            Init_SPI_B0();            // Initialize SPI Bus
   \   000000   ........     CALLA   #Init_SPI_B0
     94          // Initialization sequence from DOG-M162 reference, 8-bit, 3.3V
     95            spi_reset_active();
   \   000004   ........     CALLA   #spi_reset_active
     96          // Wait 300ms to ensure LCD is reset
     97            five_msec_sleep(WAIT_20); 
   \   000008   3C401400     MOV.W   #0x14, R12
   \   00000C   ........     CALLA   #five_msec_sleep
     98            spi_reset_idle();
   \   000010   ........     CALLA   #spi_reset_idle
     99          // Wait 150ms to ensure LCD is powered
    100            five_msec_sleep(WAIT_10); 
   \   000014   3C400A00     MOV.W   #0xa, R12
   \   000018   ........     CALLA   #five_msec_sleep
    101          // 8-bit data, 2 lines, instruction table 1
    102          // NOTE: These are set again later, when switching back to instruction table 0.
    103          // If you want to change these, be sure to change them below as well. 
    104            lcd_write(FUNCTION_SET | FUNCTION_SET_8BIT | FUNCTION_SET_2LINE | FUNCTION_SET_INST1, LCD_COMMAND);
   \   00001C   4D43         MOV.B   #0x0, R13
   \   00001E   7C403900     MOV.B   #0x39, R12
   \   000022   ........     CALLA   #lcd_write
    105          // 1/5 Bias
    106            lcd_write(BIAS_SET, LCD_COMMAND);
   \   000026   4D43         MOV.B   #0x0, R13
   \   000028   7C401400     MOV.B   #0x14, R12
   \   00002C   ........     CALLA   #lcd_write
    107          // Boost on, C4 constrast 
    108            lcd_write(POWER_SET | POWER_SET_BOOST | POWER_SET_C4, LCD_COMMAND);
   \   000030   4D43         MOV.B   #0x0, R13
   \   000032   7C405500     MOV.B   #0x55, R12
   \   000036   ........     CALLA   #lcd_write
    109            five_msec_sleep(WAIT_2); 
   \   00003A   2C43         MOV.W   #0x2, R12
   \   00003C   ........     CALLA   #five_msec_sleep
    110          // Voltage follower, gain 
    111            lcd_write(FOLLOWER_CTL | FOLLOWER_CTL_FON | FOLLOWER_CTL_GAIN(GAIN), LCD_COMMAND);
   \   000040   4D43         MOV.B   #0x0, R13
   \   000042   7C406D00     MOV.B   #0x6d, R12
   \   000046   ........     CALLA   #lcd_write
    112          // Set contrast, none of C3, C2, C1 
    113            lcd_write(CONTRAST_SET | CONTRAST_SET_C2 | CONTRAST_SET_C1, LCD_COMMAND);
   \   00004A   4D43         MOV.B   #0x0, R13
   \   00004C   7C407600     MOV.B   #0x76, R12
   \   000050   ........     CALLA   #lcd_write
    114          // Switch back to instruction table 0 
    115            lcd_write(FUNCTION_SET | FUNCTION_SET_8BIT | FUNCTION_SET_2LINE | FUNCTION_SET_INST0, LCD_COMMAND);
   \   000054   4D43         MOV.B   #0x0, R13
   \   000056   7C403800     MOV.B   #0x38, R12
   \   00005A   ........     CALLA   #lcd_write
    116          // Display on 
    117            lcd_write(DISPLAY_CTL | DISPLAY_CTL_ON, LCD_COMMAND);
   \   00005E   4D43         MOV.B   #0x0, R13
   \   000060   7C400C00     MOV.B   #0xc, R12
   \   000064   ........     CALLA   #lcd_write
    118          // Clear Display 
    119            lcd_write(CLEAR_DISPLAY, LCD_COMMAND);
   \   000068   4D43         MOV.B   #0x0, R13
   \   00006A   5C43         MOV.B   #0x1, R12
   \   00006C   ........     CALLA   #lcd_write
    120          // Cursor auto increment 
    121            lcd_write(ENTRY_MODE | ENTRY_MODE_INCRE, LCD_COMMAND);
   \   000070   4D43         MOV.B   #0x0, R13
   \   000072   7C400600     MOV.B   #0x6, R12
   \   000076   ........     CALLA   #lcd_write
    122          // Wait for display to be ready 
    123            usleep10(WAIT_20000);
   \   00007A   3C40204E     MOV.W   #0x4e20, R12
   \   00007E   ........     CALLA   #usleep10
    124            spi_rs_data();
   \   000082   ........     CALLA   #spi_rs_data
    125            usleep10(WAIT_20000);
   \   000086   3C40204E     MOV.W   #0x4e20, R12
   \   00008A   ........     BRA     #usleep10
    126          }
    127          

   \                                 In  segment CODE, align 2
    128          void lcd_write(char data, char rs){
   \                     lcd_write:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   4A4C         MOV.B   R12, R10
   \   000004   4B4D         MOV.B   R13, R11
    129            if(rs == LCD_COMMAND){spi_rs_command();}
   \   000006   4B93         CMP.B   #0x0, R11
   \   000008   0220         JNE     ??lcd_write_0
   \   00000A   ........     CALLA   #spi_rs_command
    130            usleep10(WAIT_1);
   \                     ??lcd_write_0:
   \   00000E   1C43         MOV.W   #0x1, R12
   \   000010   ........     CALLA   #usleep10
    131            spi_chipselect_active(); // Chip Select Active
   \   000014   ........     CALLA   #spi_chipselect_active
    132            usleep10(WAIT_1);
   \   000018   1C43         MOV.W   #0x1, R12
   \   00001A   ........     CALLA   #usleep10
    133            SPI_B0_write(data);
   \   00001E   4C4A         MOV.B   R10, R12
   \   000020   ........     CALLA   #SPI_B0_write
    134            usleep10(WAIT_8);
   \   000024   3C42         MOV.W   #0x8, R12
   \   000026   ........     CALLA   #usleep10
    135            spi_chipselect_idle();
   \   00002A   ........     CALLA   #spi_chipselect_idle
    136            if(rs == LCD_COMMAND){spi_rs_data();}
   \   00002E   4B93         CMP.B   #0x0, R11
   \   000030   0220         JNE     ??lcd_write_1
   \   000032   ........     CALLA   #spi_rs_data
    137            usleep10(WAIT_2);
   \                     ??lcd_write_1:
   \   000036   2C43         MOV.W   #0x2, R12
   \   000038   ........     CALLA   #usleep10
    138          }
   \   00003C   1A17         POPM.W  #0x2, R11
   \   00003E   1001         RETA
    139          

   \                                 In  segment CODE, align 2
    140          void lcd_command( char data){
   \                     lcd_command:
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
    141            spi_rs_command();
   \   000004   ........     CALLA   #spi_rs_command
    142            usleep10(WAIT_1);
   \   000008   1C43         MOV.W   #0x1, R12
   \   00000A   ........     CALLA   #usleep10
    143            spi_chipselect_active();
   \   00000E   ........     CALLA   #spi_chipselect_active
    144            usleep10(WAIT_1);
   \   000012   1C43         MOV.W   #0x1, R12
   \   000014   ........     CALLA   #usleep10
    145            SPI_B0_write(data);
   \   000018   4C4A         MOV.B   R10, R12
   \   00001A   ........     CALLA   #SPI_B0_write
    146            usleep10(WAIT_8);
   \   00001E   3C42         MOV.W   #0x8, R12
   \   000020   ........     CALLA   #usleep10
    147            spi_chipselect_idle();
   \   000024   ........     CALLA   #spi_chipselect_idle
    148            usleep10(WAIT_2);
   \   000028   2C43         MOV.W   #0x2, R12
   \   00002A   ........     CALLA   #usleep10
    149          }
   \   00002E   3A41         POP.W   R10
   \   000030   1001         RETA
    150          
    151          // Write a character to the display. '\n' will move the cursor to line 2.

   \                                 In  segment CODE, align 2
    152          void lcd_putc(char c){
   \                     lcd_putc:
    153            if (c == '\n') {
   \   000000   7C900A00     CMP.B   #0xa, R12
   \   000004   0B20         JNE     ??lcd_putc_0
    154              lcd_write(LCD_L2_C01, LCD_COMMAND);  // Move to line two
   \   000006   4D43         MOV.B   #0x0, R13
   \   000008   7C40C000     MOV.B   #0xc0, R12
   \   00000C   ........     CALLA   #lcd_write
    155              current_line = LCD_LINE_2;
   \   000010   F240C000.... MOV.B   #0xc0, &current_line
    156              char_count = WAIT_1;
   \   000016   9243....     MOV.W   #0x1, &char_count
   \   00001A   1001         RETA
    157            }else{
    158              if(char_count <= WAIT_16){
   \                     ??lcd_putc_0:
   \   00001C   B2901100.... CMP.W   #0x11, &char_count
   \   000022   032C         JC      ??lcd_putc_1
    159                lcd_write(c, LCD_DATA);          // Write character
   \   000024   5D43         MOV.B   #0x1, R13
   \   000026   ........     CALLA   #lcd_write
    160              }
    161              char_count++;
   \                     ??lcd_putc_1:
   \   00002A   9253....     ADD.W   #0x1, &char_count
    162            }
    163          }
   \   00002E   1001         RETA
    164          
    165          // Write a string to the display, using lcd_putc.

   \                                 In  segment CODE, align 2
    166          void lcd_puts(char *s){
   \                     lcd_puts:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    167            char_count = COUNT_1;
   \   000004   9243....     MOV.W   #0x1, &char_count
    168            current_line = LCD_LINE_1;
   \   000008   F2408000.... MOV.B   #0x80, &current_line
    169            if (s == NULL){
   \   00000E   0A93         CMP.W   #0x0, R10
   \   000010   0520         JNE     ??lcd_puts_1
    170              return;
   \   000012   073C         JMP     ??lcd_puts_2
    171            }
    172            while (*s) {
    173              lcd_putc(*s++);
   \                     ??lcd_puts_0:
   \   000014   6C4A         MOV.B   @R10, R12
   \   000016   ........     CALLA   #lcd_putc
   \   00001A   1A53         ADD.W   #0x1, R10
    174            }
   \                     ??lcd_puts_1:
   \   00001C   CA930000     CMP.B   #0x0, 0(R10)
   \   000020   F923         JNE     ??lcd_puts_0
    175          }
   \                     ??lcd_puts_2:
   \   000022   3A41         POP.W   R10
   \   000024   1001         RETA
    176          
    177          // Write a string to the display, using lcd_putc.

   \                                 In  segment CODE, align 2
    178          void lcd_out(char *s, char line){
   \                     lcd_out:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   4C4D         MOV.B   R13, R12
    179            lcd_write(line, LCD_COMMAND);  // Move to line two
   \   000006   4D43         MOV.B   #0x0, R13
   \   000008   ........     CALLA   #lcd_write
    180            char_count = WAIT_1;
   \   00000C   9243....     MOV.W   #0x1, &char_count
   \   000010   043C         JMP     ??lcd_out_1
    181            while (*s) {
    182              lcd_putc(*s++);
   \                     ??lcd_out_0:
   \   000012   6C4A         MOV.B   @R10, R12
   \   000014   ........     CALLA   #lcd_putc
   \   000018   1A53         ADD.W   #0x1, R10
    183            }
   \                     ??lcd_out_1:
   \   00001A   CA930000     CMP.B   #0x0, 0(R10)
   \   00001E   F923         JNE     ??lcd_out_0
    184          }
   \   000020   3A41         POP.W   R10
   \   000022   1001         RETA
    185          

   \                                 In  segment CODE, align 2
    186          void Display_Process(void){
   \                     Display_Process:
    187            lcd_out(display_1,LCD_LINE_1);   // 16 characters max between quotes - line 1
   \   000000   7D408000     MOV.B   #0x80, R13
   \   000004   1C42....     MOV.W   &display_1, R12
   \   000008   ........     CALLA   #lcd_out
    188            lcd_out(display_2,LCD_LINE_2);   // 16 characters max between quotes - line 2
   \   00000C   7D40C000     MOV.B   #0xc0, R13
   \   000010   1C42....     MOV.W   &display_2, R12
   \   000014   ........     BRA     #lcd_out
    189          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Display_Process
        4   -> lcd_out
      4   Init_LCD
        4   -> Init_SPI_B0
        4   -> five_msec_sleep
        4   -> lcd_write
        4   -> spi_reset_active
        4   -> spi_reset_idle
        4   -> spi_rs_data
        4   -> usleep10
      4   Init_SPI_B0
      4   SPI_B0_write
      6   lcd_command
        6   -> SPI_B0_write
        6   -> spi_chipselect_active
        6   -> spi_chipselect_idle
        6   -> spi_rs_command
        6   -> usleep10
      6   lcd_out
        6   -> lcd_putc
        6   -> lcd_write
      4   lcd_putc
        4   -> lcd_write
      6   lcd_puts
        6   -> lcd_putc
      8   lcd_write
        8   -> SPI_B0_write
        8   -> spi_chipselect_active
        8   -> spi_chipselect_idle
        8   -> spi_rs_command
        8   -> spi_rs_data
        8   -> usleep10
      4   spi_chipselect_active
      4   spi_chipselect_idle
      4   spi_reset_active
      4   spi_reset_idle
      4   spi_rs_command
      4   spi_rs_data


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  Display_Process
     142  Init_LCD
      38  Init_SPI_B0
      20  SPI_B0_write
       2  _A_PAOUT_L
       2  _A_UCB0BRW_L
       2  _A_UCB0CTLW0_L
       2  _A_UCB0IFG_L
       2  _A_UCB0TXBUF_L
       2  char_count
       1  current_line
       2  display_1
       2  display_2
      17  display_line_1
      17  display_line_2
       2  display_update_time
      50  lcd_command
       1  lcd_control
      36  lcd_out
      48  lcd_putc
      38  lcd_puts
      64  lcd_write
       8  spi_chipselect_active
       8  spi_chipselect_idle
       8  spi_reset_active
       8  spi_reset_idle
       8  spi_rs_command
       8  spi_rs_data
       2  update_display_count

 
 508 bytes in segment CODE
  10 bytes in segment DATA16_AN
  46 bytes in segment DATA16_Z
 
 508 bytes of CODE memory
  46 bytes of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: none
