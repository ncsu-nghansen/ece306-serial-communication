###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       11/Jan/2014  10:54:38 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  D:\NCSU\Current\Software Tools\Code                     #
#                     Master\Homework_01\interrupts_timersB2.c                #
#    Command line  =  "D:\NCSU\Current\Software Tools\Code                    #
#                     Master\Homework_01\interrupts_timersB2.c" -lC           #
#                     "D:\NCSU\Current\Software Tools\Code                    #
#                     Master\Homework_01\Debug\List\" -o                      #
#                     "D:\NCSU\Current\Software Tools\Code                    #
#                     Master\Homework_01\Debug\Obj\" --no_cse --no_unroll     #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430FR5739__ -e --double=32 --dlib_config         #
#                     "C:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.5_2\430\LIB\DLIB\dl430xsfn.h" --core=430X             #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  D:\NCSU\Current\Software Tools\Code                     #
#                     Master\Homework_01\Debug\List\interrupts_timersB2.lst   #
#    Object file   =  D:\NCSU\Current\Software Tools\Code                     #
#                     Master\Homework_01\Debug\Obj\interrupts_timersB2.r43    #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Current\Software Tools\Code Master\Homework_01\interrupts_timersB2.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Interrupt Routines for Timers
      4          //               
      5          //
      6          //  Jim Carlson
      7          //  Aug 2013
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "msp430.h"
     13          
     14          // Function prototypes
     15          __interrupt void Timer2_B0_ISR(void);
     16            __interrupt void TIMER2_B1_ISR(void);
     17          
     18          // Timer B2
     19          #define TB2CCR0_INTERVAL        (4096) // 32768 /  4096 = 1024 Hz  125 msec
     20          // Timer B2[1-2+overflow] Intervals
     21          #define TB2CCR1_INTERVAL        (8192) //
     22          #define TB2CCR2_INTERVAL       (25060) //
     23          
     24          //------------------------------------------------------------------------------
     25          //Globals Defined in interrupts_timers.c
     26          // Timer B2
     27          
     28          // LEDs 
     29          volatile unsigned int led_blink;
     30          // GPS
     31          unsigned int gps_resetting;
     32          unsigned int gps_2b_reset;
     33          unsigned int reset_gps_time;
     34          extern volatile int time_pass_by;
     35          char transmit_delay;
     36          char transmit_time;
     37          
     38          //Globals Defined in other files
     39          // System info
     40          extern volatile unsigned char control_state[CNTL_STATE_INDEX];
                                                             ^
Error[Pe020]: identifier "CNTL_STATE_INDEX" is undefined
     41          // Time
     42          extern volatile unsigned int Time_Sequence;
     43          extern volatile unsigned int five_msec_count;
     44          extern volatile unsigned int sleeping;
     45          extern volatile char one_time;
     46          extern volatile char sleeptime;
     47          // Serial
     48          
     49          
     50          //******************************************************************************
     51          //------------------------------------------------------------------------------
     52          // Timer2 B0 Interrupt handler
     53          #pragma vector=TIMER2_B0_VECTOR
     54          __interrupt void Timer2_B0_ISR(void){
     55            Time_Sequence++;
     56            one_time = 1;
     57            if (five_msec_count < 1000){
     58              five_msec_count++;
     59            }
     60            TB2CCR0 += TB2CCR0_INTERVAL;     // Add Offset to TB1CCR0
     61          }
     62          //------------------------------------------------------------------------------
     63          
     64          //------------------------------------------------------------------------------
     65          // Timer2 B1-B3 Interrupt Vector (TAIV) handler
     66          #pragma vector=TIMER2_B1_VECTOR
     67          __interrupt void TIMER2_B1_ISR(void){
     68            switch(__even_in_range(TB2IV,14)){
     69              case  0: break;                    // No interrupt
     70              case  2:                           // CCR1 is set to be 100 msec timer
     71                TB2CCR1 += TB2CCR1_INTERVAL;     // Add Offset to TB1CCR1
     72                break;
     73              case  4:                           // CCR2 is set to be 200 msec timer
     74                TB2CCR2 += TB2CCR2_INTERVAL;     // Add Offset to TB1CCR2
     75                break;
     76              case  6: break;                    // reserved
     77              case  8: break;                    // reserved
     78              case 10: break;                    // reserved
     79              case 12: break;                    // reserved
     80              case 14:                           // overflow
     81                break;
     82              default: break; 
     83            }
     84          }
     85          //------------------------------------------------------------------------------
     86          //******************************************************************************
     87          
     88          //------------------------------------------------------------------------------

Errors: 1
Warnings: none
